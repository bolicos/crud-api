plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'br.bolicos'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.3")
    set('springdocVersion', "2.6.0")
    set('mapstructVersion', "1.6.0")
    set('lombokMapstructBindingVersion', "0.2.0")
}


dependencies {
//	Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

//	External libraries
    implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:' + springdocVersion //https://springdoc.org/
    implementation 'org.mapstruct:mapstruct:' + mapstructVersion // https://mapstruct.org/

//	Runtime
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'

//	Development
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:' + mapstructVersion
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:" + lombokMapstructBindingVersion

//	Tests
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jacoco { // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    toolVersion = "0.8.12"
}

bootJar {
    archiveFileName = 'app.jar'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

tasks.register('unitTest', Test) {
    finalizedBy jacocoTestReport
    useJUnitPlatform {
        includeTags 'unit'
    }
}

tasks.register('integrationTest', Test) {
    finalizedBy jacocoTestReport
    useJUnitPlatform {
        includeTags 'integration'
    }
}
